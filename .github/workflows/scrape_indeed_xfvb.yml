name: Indeed Scrape
on:
  #schedule:
    # At 7:30 PM Jakarta Time (12:30 UTC, assuming WIB is UTC+7)
   #  - cron: '0 7,13,1 * * *' # Cron times are in UTC
  workflow_dispatch:

jobs:
  build:
    env:
      PY_COLORS: "1"
      # Set DISPLAY environment variable for Xvfb
      # This will be set by xvfb-run, but can be good to have a default
      DISPLAY: ':99.0' 
      PYTHONIOENCODING: 'utf-8'
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-22.04]
        python-version: ["3.11"] # Using 3.11 as it's generally well-supported, adjust if 3.13 is crucial

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set Locale
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y # Add update here
        sudo apt-get install tzdata locales -y && sudo locale-gen en_US.UTF-8
        sudo localectl set-locale LANG="en_US.UTF-8"
        export LANG="en_US.UTF-8" # Ensure it's exported for the current session
        sudo update-locale
        echo "--- Locale -a ---"
        locale -a
        echo "--- Locale ---"
        locale
        echo "--- Locale -c -k LC_NUMERIC ---"
        locale -c -k LC_NUMERIC
        echo "--- Localectl status ---"
        localectl status

    - name: Install system dependencies for GUI and Xvfb
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y xvfb xauth libxrender1 libxtst6 libxi6 gnome-screenshot # Install xvfb and related X libraries

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # pip install --upgrade pip # Duplicate, removed
        pip install --upgrade wheel
        pip install -r requirements.txt
        pip install --upgrade pyautogui # Ensure pyautogui is in requirements.txt or installed here

    - name: Install extra Python dependencies for Linux (python-xlib)
      if: runner.os == 'Linux'
      run: |
        pip install --upgrade python-xlib # pyautogui should pull this in, but explicit is fine

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are flake8 issues
        flake8 . --count --show-source --statistics --exclude=temp,venv,.venv,build,dist,*.egg-info

    - name: Install Google Chrome
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update -y
        # Attempt to install Chrome if not already present or if specific version needed
        # GitHub runners often have Chrome. This ensures it if not.
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update -y
        sudo apt-get install -y google-chrome-stable
        google-chrome --version # Verify installation

    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase

    - name: Install chromedriver (and browser if needed by SeleniumBase)
      run: |
        seleniumbase install chromedriver
        # SeleniumBase will also try to download a browser if it can't find one.

    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py --uc

    - name: Check which Chrome binaries exist
      run: |
        python -c "import os; print(f\"/usr/bin/google-chrome exists: {os.path.exists('/usr/bin/google-chrome')}\")"
        python -c "import os; print(f\"/opt/google/chrome/chrome exists: {os.path.exists('/opt/google/chrome/chrome')}\")" # Another common path
        python -c "import os; print(f\"/bin/google-chrome-stable exists: {os.path.exists('/bin/google-chrome-stable')}\")"
        python -c "import os; print(f\"/bin/chromium-browser exists: {os.path.exists('/bin/chromium-browser')}\")"
        python -c "import os; print(f\"/bin/chromium exists: {os.path.exists('/bin/chromium')}\")"

    - name: Display Chrome binary that's used by SeleniumBase
      run: |
        python -c "from seleniumbase.core import detect_b_ver; print(detect_b_ver.get_binary_location('google-chrome'))"
        python -c "from seleniumbase import undetected; print(undetected.find_chrome_executable())"

    - name: Make sure pytest with sb is working
      run: |
        echo "def test_0(sb): pass" > verify_sb.py
        # Run with xvfb-run if tests might involve GUI interactions or uc_gui_handle_cf
        xvfb-run -a --server-args='-screen 0 1280x1024x24' pytest verify_sb.py

    - name: Run python scrape_indeed.py --debug
      env:
        PROXY_USER: ${{ secrets.PROXY_USER }}
        PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        PROXY_HOST: ${{ secrets.PROXY_HOST }}
        PROXY_PORT: ${{ secrets.PROXY_PORT }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        SA_PRIVKEY_ID: ${{ secrets.SA_PRIVKEY_ID }}
        SA_PRIVKEY: ${{ secrets.SA_PRIVKEY }}
        SA_CLIENTMAIL: ${{ secrets.SA_CLIENTMAIL }}
        SA_CLIENT_X509_URL: ${{ secrets.SA_CLIENT_X509_URL }}
      # Wrap the main script execution with xvfb-run
      run: |
        xvfb-run -a -f $HOME/.Xauthority --server-args='-screen 0 1280x1024x24' python scrape_indeed.py --debug
