name: Indeed Scrape Windows

on:
  schedule:
    # At 7:30 PM Jakarta Time (12:30 UTC, assuming WIB is UTC+7)
     - cron: '0 7,13,1 * * *' # Cron times are in UTC
  workflow_dispatch:

jobs:
  build:
    env:
      PY_COLORS: "1"
      PYTHONIOENCODING: 'utf-8' # <--- Add this line
    strategy:
      fail-fast: false
      max-parallel: 1 # Keep parallelism at 1 if your scraping target is sensitive
      matrix:
        os: [windows-latest] # Changed to Windows
        python-version: ["3.11"] # Using a common stable version, adjust if 3.13 is strictly needed and available

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Locale setup is not typically needed for Windows in the same way as Linux
    # Windows uses different mechanisms for locale and character encoding.
    # Default UTF-8 behavior in Python 3 should handle most cases.

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade wheel
        pip install -r requirements.txt
        pip install --upgrade pyautogui
    # python-xlib is Linux-specific, so the "Install extra dependencies" step is removed.

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are flake8 issues
        # Adjust path separators for Windows if necessary, though flake8 usually handles it.
        flake8 . --count --show-source --statistics --exclude=temp,venv,.venv,build,dist,*.egg-info

    # Chrome installation is usually handled by SeleniumBase or is pre-available on GitHub Windows runners.
    # If a specific Chrome version is needed and not found, SeleniumBase might try to download it.

    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase

    - name: Install chromedriver (and browser if needed)
      run: |
        seleniumbase install chromedriver
        # SeleniumBase will also download a browser if it can't find one.

    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py --uc

    # Chrome binary checks might differ on Windows.
    # SeleniumBase's detection should work, but these specific paths are Linux-oriented.
    # Keeping them for now; they might just print False, which is fine.
    - name: Check common Chrome binary locations (for informational purposes)
      shell: bash # Use bash for consistency with original Linux commands if possible, or adapt to PowerShell
      run: |
        python -c "import os; print(os.path.exists(r'C:\Program Files\Google\Chrome\Application\chrome.exe'))"
        python -c "import os; print(os.path.exists(r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'))"

    - name: Display Chrome binary that's used by SeleniumBase
      run: |
        python -c "from seleniumbase.core import detect_b_ver; print(detect_b_ver.get_binary_location('google-chrome'))"
        python -c "from seleniumbase import undetected; print(undetected.find_chrome_executable())"

    - name: Make sure pytest with sb is working
      run: |
        echo "def test_0(sb): pass" > verify_sb.py
        pytest verify_sb.py

    - name: Run python scrape_data.py --debug
      env:
        PROXY_USER: ${{ secrets.PROXY_USER }}
        PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        PROXY_HOST: ${{ secrets.PROXY_HOST }}
        PROXY_PORT: ${{ secrets.PROXY_PORT }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        SA_PRIVKEY_ID: ${{ secrets.SA_PRIVKEY_ID }}
        SA_PRIVKEY: ${{ secrets.SA_PRIVKEY }}
        SA_CLIENTMAIL: ${{ secrets.SA_CLIENTMAIL }}
        SA_CLIENT_X509_URL: ${{ secrets.SA_CLIENT_X509_URL }}
      run: |
        python scrape_indeed.py --debug
